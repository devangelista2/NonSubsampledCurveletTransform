import numpy as np
import matplotlib.pyplot as plt
import math
import scipy
from scipy.signal import convolve, convolve2d, fftconvolve
from scipy.fft import fft
import utils


def get_pyramidal_filter(fname):
    """
    Get the pyramidal filters given the name. Available filter names:

    - 9-7

    :param fname: str, name of the filter.
    :return: list, a list (h0, h1, g0, g1) with the filter whose type is ndarray.
    """

    if fname == '9-7':
        # Filters derived from 9-7 prototypes, frame bounds A=0.91, B=1.101

        h0 = [
            [0.00010448733363597687, 0.000835898669087815, 0.0029256453418073525, 0.005851290683614705, 0.007314113354518382,
             0.005851290683614705, 0.0029256453418073525, 0.000835898669087815, 0.00010448733363597687],
            [0.000835898669087815, 0.003080092825681339, 0.001762583572331734, -0.007296122436400075, -0.013629023704276572,
             -0.007296122436400075, 0.001762583572331734, 0.003080092825681339, 0.000835898669087815],
            [0.0029256453418073525, 0.001762583572331734, -0.01306636838062783, -0.02131840020457929, -0.018830187186854155,
             -0.02131840020457929, -0.01306636838062783, 0.001762583572331734, 0.0029256453418073525],
            [0.005851290683614705, -0.007296122436400075, -0.02131840020457929, 0.0740121520471188, 0.16436627826336664,
             0.0740121520471188, -0.02131840020457929, -0.007296122436400075, 0.005851290683614705],
            [0.007314113354518382, -0.013629023704276572, -0.018830187186854155, 0.16436627826336664, 0.3245066567828517,
             0.16436627826336664, -0.018830187186854155, -0.013629023704276572, 0.007314113354518382],
            [0.005851290683614705, -0.007296122436400075, -0.02131840020457929, 0.0740121520471188, 0.16436627826336664,
             0.0740121520471188, -0.02131840020457929, -0.007296122436400075, 0.005851290683614705],
            [0.0029256453418073525, 0.001762583572331734, -0.01306636838062783, -0.02131840020457929, -0.018830187186854155,
             -0.02131840020457929, -0.01306636838062783, 0.001762583572331734, 0.0029256453418073525],
            [0.000835898669087815, 0.003080092825681339, 0.001762583572331734, -0.007296122436400075, -0.013629023704276572,
             -0.007296122436400075, 0.001762583572331734, 0.003080092825681339, 0.000835898669087815],
            [0.00010448733363597687, 0.000835898669087815, 0.0029256453418073525, 0.005851290683614705, 0.007314113354518382,
             0.005851290683614705, 0.0029256453418073525, 0.000835898669087815, 0.00010448733363597687]
            ]

        h1 = [
            [0.0014261212986601578, 0.008556727791960947, 0.021391819479902367, 0.028522425973203154, 0.021391819479902367,
              0.008556727791960947, 0.0014261212986601578],
            [0.008556727791960947, 0.01351698519464063, -0.022942609349085995, -0.055805733503531366, -0.022942609349085995,
             0.01351698519464063, 0.008556727791960947],
            [0.021391819479902367, -0.0229426093490859905, -0.1692097602584649, -0.24975066285895303, -0.1692097602584649,
             -0.022942609349085995, 0.021391819479902367],
            [0.028522425973203154, -0.055805733503531366, -0.24975066285895303, 1.669154993235563, -0.24975066285895303,
             -0.055805733503531366, 0.028522425973203154],
            [0.021391819479902367, -0.022942609349085995, -0.1692097602584649, -0.24975066285895303, -0.1692097602584649,
             -0.022942609349085995, 0.021391819479902367],
            [0.008556727791960947, 0.01351698519464063, - 0.022942609349085995, - 0.055805733503531366, -0.022942609349085995,
             0.01351698519464063, 0.008556727791960947],
            [0.0014261212986601578, 0.008556727791960947, 0.021391819479902367, 0.028522425973203154, 0.021391819479902367,
             0.008556727791960947, 0.0014261212986601578]
            ]

        g0 = [
            [-0.0014261212986601578, -0.008556727791960947, -0.021391819479902367, -0.028522425973203154, -0.021391819479902367,
              -0.008556727791960947, -0.0014261212986601578],
            [-0.008556727791960947, -0.020709925973203154, -0.005829153765164099, 0.012648088832156207, -0.005829153765164099,
             -0.020709925973203154, -0.008556727791960947],
            [-0.021391819479902367, -0.005829153765164099, 0.1692097602584649, 0.3072941890874532, 0.1692097602584649,
             -0.005829153765164099, -0.021391819479902367],
            [-0.028522425973203154, 0.012648088832156207, 0.3072941890874532, 0.5322473485641878, 0.3072941890874532,
             0.012648088832156207, -0.028522425973203154],
            [-0.021391819479902367, -0.005829153765164099, 0.1692097602584649, 0.3072941890874532, 0.1692097602584649,
             -0.005829153765164099, -0.02139181947990236],
            [-0.008556727791960947, -0.020709925973203154, -0.005829153765164099, 0.012648088832156207, -0.005829153765164099,
             -0.020709925973203154, -0.008556727791960947],
            [-0.0014261212986601578, -0.008556727791960947, -0.021391819479902367, -0.028522425973203154, -0.021391819479902367,
             -0.008556727791960947, -0.0014261212986601578]
            ]

        g1 = [
            [0.00010448733363597687, 0.000835898669087815, 0.0029256453418073525, 0.005851290683614705, 0.007314113354518382,
             0.005851290683614705, 0.0029256453418073525, 0.000835898669087815, 0.00010448733363597687],
            [0.000835898669087815, 0.0036070965270211808, 0.004924605780370786, 0.0006089330836975557, -0.0030889496774797283,
             0.0006089330836975557, 0.004924605780370786, 0.0036070965270211808, 0.000835898669087815],
            [0.0029256453418073525, 0.004924605780370786, -0.006742323964549725, -0.024480422412618347, -0.03147827601901037,
             -0.024480422412618347, -0.006742323964549725, 0.004924605780370786, 0.0029256453418073525],
            [0.005851290683614705, 0.0006089330836975557, -0.024480422412618347, -0.06732496269441629, -0.09617379576343019,
             -0.06732496269441629, -0.024480422412618347, 0.0006089330836975557, 0.005851290683614705],
            [ 0.007314113354518382, -0.0030889496774797283, -0.03147827601901037, -0.09617379576343019, 0.849802834447164,
              -0.09617379576343019, -0.03147827601901037, -0.0030889496774797283, 0.007314113354518382],
            [0.005851290683614705, 0.0006089330836975557, -0.024480422412618347, -0.06732496269441629, -0.09617379576343019,
             -0.06732496269441629, -0.024480422412618347, 0.0006089330836975557, 0.005851290683614705],
            [0.0029256453418073525, 0.004924605780370786, -0.006742323964549725, -0.024480422412618347, -0.03147827601901037,
             -0.024480422412618347, -0.006742323964549725, 0.004924605780370786, 0.0029256453418073525],
            [0.000835898669087815, 0.0036070965270211808, 0.004924605780370786, 0.0006089330836975557, -0.0030889496774797283,
             0.0006089330836975557, 0.004924605780370786, 0.0036070965270211808, 0.000835898669087815],
            [0.00010448733363597687, 0.000835898669087815, 0.0029256453418073525, 0.005851290683614705, 0.007314113354518382,
             0.005851290683614705, 0.0029256453418073525, 0.000835898669087815, 0.00010448733363597687]
            ]

        # Filter normalization
        h0 = np.array(h0)
        h1 = np.array(h1) / 2

        g0 = np.array(g0) / 2
        g1 = np.array(g1)
    else:
        print("fname not in the list")
        h0, h1, g0, g1 = 0, 0, 0, 0

    return h0, h1, g0, g1


def get_directional_filter(fname):
    """
    Get the directional filters given the name. Available filter names:

    - haar
    - dmaxflat4

    :param fname: str, name of the filter.
    :return: list, a list (h0, h1, g0, g1) with the filter whose type is ndarray.
    """

    if fname == 'haar':
        # Haar filters
        h0 = [
            [1, 1]
        ]

        h1 = [
            [-1, 1]
        ]

        g0 = [
            [1, 1]
        ]

        g1 = [
            [1, -1]
        ]

        # Normalization
        h0 = np.array(h0) / np.sqrt(2)
        h1 = np.array(h1) / np.sqrt(2)

        g0 = np.array(g0) / np.sqrt(2)
        g1 = np.array(g1) / np.sqrt(2)

    elif fname == "dmaxflat4":
        M1 = 1/math.sqrt(2)
        M2 = M1
        k1 = 1 - math.sqrt(2)
        k3 = k1
        k2 = M1

        h = np.array([[0.25*k2*k3, 0.5*k2, 1+0.5*k2*k3]]) * M1
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        g = np.array([[-0.125*k1*k2*k3, 0.25*k1*k2, (-0.5*k1-0.5*k3-0.375*k1*k2*k3), 1+0.5*k1*k2]]) * M2
        g1 = np.fliplr(g[:, :-1])
        g = np.concatenate((g, g1), axis=1)

        B = dmaxflat(4, 0)
        h0 = utils.mcclellan_transform(h, B)
        g0 = utils.mcclellan_transform(g, B)

        h0 = np.sqrt(2) * (h0 / np.sum(h0))
        g0 = np.sqrt(2) * (g0 / np.sum(g0))

        h1 = utils.modulate(g0, 'b')
        g1 = utils.modulate(h0, 'b')

    else:
        print("fname not in the list")
        h0, h1, g0, g1 = 0, 0, 0, 0

    return h0, h1, g0, g1


def get_parallelogram_filters(h0, h1):
    """
    Generates four group of parallelogram filters from a pair of diamond filters h0, h1 by modulation and rotation.

    :param h0: ndarray, the filter for the first branch
    :param h1: ndarray, the filter for the second branch
    :return: tuple, a tuple (y1, y2), where each yi is a list with 4 elements: the parallelogram filters.
    """
    y1 = list()
    y2 = list()

    # Row Modulation
    y1.append(utils.modulate(h0, 'r'))
    y2.append(utils.modulate(h1, 'r'))

    # Columns Modulation
    y1.append(utils.modulate(h0, 'c'))
    y2.append(utils.modulate(h1, 'c'))

    # Get the other two filter in each group by using transposition
    y1.append(np.transpose(y1[0]))
    y2.append(np.transpose(y2[0]))
    y1.append(np.transpose(y1[1]))
    y2.append(np.transpose(y2[2]))

    # Apply rotation to each group
    for i in range(4):
        y1[i] = utils.resampz(y1[i], i)
        y2[i] = utils.resampz(y2[i], i)

    return y1, y2


def dmaxflat(N, d):
    """
    Computes the 2 dimensional diamond flat filter of order N. The filters are not separable and 'd' is the (0, 0)
    coefficient, being 0 or 1 depending on use.

    Available values for N: 1, 2, 3, 4, 5, 6, 7

    :param N: int, the order of the filter
    :param d: int, 0 or 1, the (0, 0) coefficient of the filter.
    :return: ndarray, the 2 dimensional diamond flat filter of order N
    """

    if N == 1:
        h = [
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ]

        h = np.array(h)
        h = h / 4
        h[1, 1] = d

    elif N == 2:
        h = [
            [0, -1, 0],
            [-1, 0, 10],
            [0, 10, 0]
        ]

        h = np.array(h)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :]) / 32
        h = np.concatenate((h, h2), axis=0)
        h[2, 2] = d

    elif N == 3:
        h = [
            [0, 3, 0, 2],
            [3, 0, -27, 0],
            [0, -27, 0, 174],
            [2, 0, 174, 0]
        ]

        h = np.array(h)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :]) / 512
        h = np.concatenate((h, h2), axis=0)
        h[3, 3] = d

    elif N == 4:
        h = [
            [0, -5, 0, -3, 0],
            [-5, 0, 52, 0, 34],
            [0, 52, 0, -276, 0],
            [-3, 0, -276, 0, 1454],
            [0, 34, 0, 1454, 0]
        ]

        h = np.array(h)
        h = h / (2**12)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :])
        h = np.concatenate((h, h2), axis=0)

        h[4, 4] = d

    elif N == 5:
        h = [
            [0, 35, 0, 20, 0, 18],
            [35, 0, -425, 0, -250, 0],
            [0, -425, 0, 2500, 0, 1610],
            [20, 0, 2500, 0, -10200, 0],
            [0, -250, 0, -10200, 0, 47780],
            [18, 0, 1610, 0, 47780, 0]
        ]

        h = np.array(h)
        h = h / (2**17)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :])
        h = np.concatenate((h, h2), axis=0)
        h[5, 5] = d

    elif N == 6:
        h = [
            [0, -63, 0, -35, 0, -30, 0],
            [-63, 0, 882, 0, 495, 0, 444],
            [0, 882, 0, -5910, 0, -3420, 0],
            [-35, 0, -5910, 0, 25875, 0, 16460],
            [ 0, 495, 0, 25875, 0, -89730, 0],
            [-30, 0, -3420, 0, -89730, 0, 389112],
            [0, 44, 0, 16460, 0, 389112, 0]
        ]

        h = np.array(h)
        h = h / (2**20)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :])
        h = np.concatenate((h, h2), axis=0)
        h[6, 6] = d

    elif N == 7:
        h = [
            [0, 231, 0, 126, 0, 105, 0, 100],
            [231, 0, -3675, 0, -2009, 0, -1715, 0],
            [0, -3675, 0, 27930, 0, 15435, 0, 13804],
            [126, 0, 27930, 0, -136514, 0, -77910, 0],
            [0, -2009, 0, -136514, 0, 495145, 0, 311780],
            [105, 0, 15435, 0, 495145, 0, -1535709, 0],
            [0, -1715, 0, -77910, 0, -1535709, 0, 6305740],
            [100, 0, 13804, 0, 311780, 0, 6305740, 0]
        ]

        h = np.array(h)
        h = h / (2**24)
        h1 = np.fliplr(h[:, :-1])
        h = np.concatenate((h, h1), axis=1)

        h2 = np.flipud(h[:-1, :])
        h = np.concatenate((h, h2), axis=0)
        h[7, 7] = d

    else:
        print("Error, degree N not available.")
        h = 0

    return h




